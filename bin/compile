#!/usr/bin/env bash

set -euo pipefail

export BUILD_DIR="$1"
export ENV_DIR="$3"

function log() {
    echo "-----> $*"
}

function indent() {
    sed -e 's/^/       /'
}

function warning() {
    local ansi_yellow='\033[1;33m'
    local ansi_reset='\033[0m'
    echo >&2
    while IFS= read -r line; do
        echo -e "${ansi_yellow} !     ${line}${ansi_reset}" >&2
    done
    echo >&2
}

warning <<-'EOF'
Warning: This buildpack is no longer required!

The Heroku Python buildpack now supports Poetry itself,
and so an additional Poetry buildpack is no longer
required to deploy an app that uses Poetry to Heroku.

We recommend migrating away from this buildpack, since:
- It is deprecated and no longer being maintained.
- The native Poetry support installs dependencies using
  Poetry directly, rather than by exporting them to a
  requirements.txt file for use with pip. It also caches
  the Poetry install for faster rebuilds.

To migrate:
1. Run 'heroku buildpacks' to find the exact URL/alias
   configured on your app for the Poetry buildpack.
2. Remove the Poetry buildpack using:
   'heroku buildpacks:remove <BUILDPACK_URL>'
   For example:
   'heroku buildpacks:remove https://github.com/moneymeets/python-poetry-buildpack.git'
3. Create a '.python-version' file in the root of your
   repository containing a Python version that matches
   the version listed in your 'poetry.lock' under
   'metadata.python-versions'. For syntax, see:
   https://devcenter.heroku.com/articles/python-runtimes
4. Commit all changes and deploy your app as normal.

For more information, see:
https://github.com/moneymeets/python-poetry-buildpack/issues/75
https://github.com/heroku/heroku-buildpack-python/pull/1682
EOF

BUILDPACK_VARIABLES="DISABLE_POETRY_CREATE_RUNTIME_FILE PYTHON_RUNTIME_VERSION"

shopt -s nullglob

for env_file in "$ENV_DIR"/POETRY_* ; do
    export "$(basename "$env_file")=$(cat "$env_file" 2>/dev/null)"
done

for env_file in $BUILDPACK_VARIABLES ; do
    [ -f "$ENV_DIR/$env_file" ] && export "$(basename "$env_file")=$(cat "$ENV_DIR/$env_file" 2>/dev/null)"
done

POETRY_VERSION="${POETRY_VERSION:-}"

if [ -z "$POETRY_VERSION" ] ; then
    if [ -f "$BUILD_DIR/poetry.lock" ] ; then
        POETRY_VERSION=$(head --lines=1 "$BUILD_DIR/poetry.lock" | grep --only-matching '[0-9]\+\.[0-9]\+\.[0-9]\+' || true)
    fi
    if [ -n "$POETRY_VERSION" ] ; then
        export POETRY_VERSION
        log "Read Poetry version $POETRY_VERSION from poetry.lock"
    else
        log "No Poetry version specified in POETRY_VERSION config var. Defaulting to latest."
    fi
else
    log "Using Poetry version from POETRY_VERSION config var: $POETRY_VERSION"
fi

log "Generate requirements.txt with Poetry"

log "Install Poetry"
curl -sSL https://install.python-poetry.org | python3 | indent

log "Add Poetry to the PATH"
export PATH="/app/.local/bin:$PATH"

if [ "${POETRY_VERSION:0:3}" = "1.2" ] ; then
    # Allow `poetry export` to work even if we aren't using the Python version that the project will ultimately run in
    # The problem exists in Poetry version 1.2.0 and has been fixed in https://github.com/python-poetry/poetry/pull/6282
    # This change is kept for backwards compatibility
    log "Force usage of active Python and disable creation of virtualenvs"
    poetry config virtualenvs.prefer-active-python true | indent
    poetry config virtualenvs.create false | indent
fi

# Plugin needs to be installed explicitly in future versions of Poetry
log "Install poetry-plugin-export"
poetry self add 'poetry-plugin-export@*' | indent

# Disabled warning about manually installing export plugin
# https://python-poetry.org/blog/announcing-poetry-1.8.0/#removing-poetry-plugin-export-from-the-default-installation
if [ "${POETRY_VERSION:0:3}" = "1.8" ] ; then
    poetry config warnings.export false
fi

REQUIREMENTS_FILE="requirements.txt"

log "Export $REQUIREMENTS_FILE from Poetry"

cd "$BUILD_DIR"

EXPORT_PARAMETERS=(--without-hashes --with-credentials)

if [ "${POETRY_EXPORT_PARAMS:-0}" != "0" ] ; then
    IFS=" " read -r -a EXPORT_PARAMETERS <<< "$POETRY_EXPORT_PARAMS"
    log "Using POETRY_EXPORT_PARAMS to set export params (" "${EXPORT_PARAMETERS[@]}" ") for $REQUIREMENTS_FILE"
fi

if [ "${POETRY_EXPORT_DEV_REQUIREMENTS:-0}" != "0" ] ; then
    log "Enable exporting dev requirements to $REQUIREMENTS_FILE"
    EXPORT_PARAMETERS+=(--dev)
fi

# pip can't handle vcs & editable dependencies when requiring hashes (https://github.com/pypa/pip/issues/4995)
# poetry exports local dependencies as editable by default (https://github.com/python-poetry/poetry/issues/897)
poetry export -f requirements.txt "${EXPORT_PARAMETERS[@]}" -o "$REQUIREMENTS_FILE.orig" | indent
sed -e 's/^-e //' < "$REQUIREMENTS_FILE.orig" > "$REQUIREMENTS_FILE" && rm "$REQUIREMENTS_FILE.orig"

RUNTIME_FILE="runtime.txt"

log "Export Python version from Poetry to Heroku $RUNTIME_FILE file"

if [ "${DISABLE_POETRY_CREATE_RUNTIME_FILE:-0}" != "0" ] ; then
    log "Skip generation of $RUNTIME_FILE file from poetry.lock"
    exit 0
fi

if [ -f "$RUNTIME_FILE" ] ; then
    log "$RUNTIME_FILE found, delete this file from your repository!" >&2
    exit 1
fi

if [ -z "${PYTHON_RUNTIME_VERSION:-}" ] ; then
    log "Read Python version from poetry.lock"
    PYTHON_RUNTIME_VERSION="$(sed -n -e '/^\[metadata\]/,/^\[/p' poetry.lock | sed -n -e 's/^python-versions[[:space:]]*=[[:space:]]*//p' | tr -d \"'[:space:]'\')"
else
    log "Force Python version to $PYTHON_RUNTIME_VERSION, because PYTHON_RUNTIME_VERSION is set!"
fi

# Version is only valid if exact interpreter version is specified
#
# ^3.8 -> not valid
# 3.8 -> not valid
# 3.8.1 -> valid
# ==3.8.1 -> valid

if [[ "$PYTHON_RUNTIME_VERSION" =~ ^(==)?[2-9](\.[0-9]+){2}$ ]] ; then
    PYTHON_RUNTIME_VERSION=${PYTHON_RUNTIME_VERSION#"=="}
    log "Write $PYTHON_RUNTIME_VERSION into $RUNTIME_FILE"
    echo "python-$PYTHON_RUNTIME_VERSION" > "$RUNTIME_FILE"
else
    log "$PYTHON_RUNTIME_VERSION is not valid, please specify an exact Python version (e.g. 3.8.1 or ==3.8.1) in your pyproject.toml (and thus poetry.lock)" >&2
    exit 1
fi
